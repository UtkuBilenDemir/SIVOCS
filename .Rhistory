model_theory <-"
## intention_agency
ia_human_condition =~ motivation.welfare.+benefitForNonAcademy+impulseForNonAcad.soc.+targetGroupsGoals.improve.+impulseForNonAcad.health.+impulseForNonAcad.ecol.+kindOfChange.pub.+kindOfChange.socgr.+kindOfChange.welfare.+kindOfChange.civsoc.
ia_non_academic =~ impulseForNonAcad.econ.+impulseForNonAcad.tech.
## transdisciplinary_apects
transdisciplinary_social =~ groupsInvolved.citiz.+groupsInvolved.civsoc.+groupsInvolved.welfare.+natureOfInvolvement.citiz.+natureOfInvolvement.civsoc.+natureOfInvolvement.welfare.+targetGroupsGoals.socneeds.+targetGroupsGoals.socgroups.+targetGroupsGoals.empower.+targetGroupsGoals.diversity.
outcome =~ impactTargetGroup.pub.+impactTargetGroup.socgr.+impactTargetGroup.welfare.+impactTargetGroup.civsoc.+Impactstatements.capab.+Impactstatements.emanc.+Impactstatements.understanding.+Impactstatements.mitig.+Impactstatements.unknown.+Impactstatements.unaddressed.
## MISC:policy
policy =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+groupsInvolved.policy.+adoptByPolicyHow.SQ001."
model_theory2 <-"
# SOLUTION ORIENTATION
ia_human_condition =~
motivation.welfare. +
benefitForNonAcademy +
impulseForNonAcad.soc. +
targetGroupsGoals.improve.
ia_nonacad_impulse =~
impulseForNonAcad.econ. +
impulseForNonAcad.tech. +
impulseForNonAcad.health. +
impulseForNonAcad.ecol.
#  ACTORS & NETWORKS
transdisciplinary_involvement =~
groupsInvolved.citiz. +
groupsInvolved.civsoc. +
groupsInvolved.welfare. +
natureOfInvolvement.citiz. +
natureOfInvolvement.civsoc. +
natureOfInvolvement.welfare.
transdisciplinary_goals =~
targetGroupsGoals.socneeds. +
targetGroupsGoals.socgroups. +
targetGroupsGoals.empower. +
targetGroupsGoals.diversity.
# NOVELTY
innovativeness =~
kindOfChange.pub. +
kindOfChange.socgr. +
kindOfChange.welfare. +
kindOfChange.civsoc.
# OUTCOME
outcomes =~
impactTargetGroup.pub. +
impactTargetGroup.socgr. +
impactTargetGroup.welfare. +
impactTargetGroup.civsoc. +
Impactstatements.capab. +
Impactstatements.emanc. +
Impactstatements.understanding. +
Impactstatements.mitig. +
Impactstatements.unknown. +
Impactstatements.unaddressed.
# MISC:policy
policy =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+groupsInvolved.policy.+adoptByPolicyHow.SQ001."
model_theory3 <-"
# SOLUTION ORIENTATION
ia_human_condition =~
motivation.welfare. +
benefitForNonAcademy +
impulseForNonAcad.soc. +
targetGroupsGoals.improve.
ia_nonacad_impulse =~
impulseForNonAcad.econ. +
impulseForNonAcad.tech. +
impulseForNonAcad.health. +
impulseForNonAcad.ecol.
#  ACTORS & NETWORKS
transdisciplinary_involvement =~
groupsInvolved.citiz. +
groupsInvolved.civsoc. +
groupsInvolved.welfare. +
groupsInvolved.policy. +
natureOfInvolvement.citiz. +
natureOfInvolvement.civsoc. +
natureOfInvolvement.welfare. +
natureOfInvolvement.policy.
transdisciplinary_goals =~
targetGroupsGoals.socneeds. +
targetGroupsGoals.socgroups. +
targetGroupsGoals.empower. +
targetGroupsGoals.diversity.
# NOVELTY
innovativeness =~
kindOfChange.pub. +
kindOfChange.socgr. +
kindOfChange.welfare. +
kindOfChange.civsoc. +
kindOfChange.policy.
# OUTCOME
outcome =~
impactTargetGroup.pub. +
impactTargetGroup.socgr. +
impactTargetGroup.welfare. +
impactTargetGroup.civsoc. +
impactTargetGroup.policy. +
Impactstatements.capab. +
Impactstatements.emanc. +
Impactstatements.understanding. +
Impactstatements.mitig. +
Impactstatements.unknown. +
Impactstatements.unaddressed. +
adoptByPolicyHow.SQ001.
"
fit_theory <- cfa(model_theory, df_model)
summary(fit_theory, fit.measures = T, standardized = T)
modificationindices(fit_theory) %>%
arrange(-mi) %>%
head(10)
fit_theory2 <- cfa(model_theory2, df_model)
# Scale using latent variable variance rather than the first factor loading
fit_theory2b <- cfa(model_theory2, df_model, std.lv = T)
summary(fit_theory2, fit.measures = T, standardized = T)
modificationindices(fit_theory2) %>%
arrange(-mi) %>%
head(10)
fit_theory3 <- cfa(model_theory3, df_model)
summary(fit_theory3, fit.measures = T, standardized = T)
modificationindices(fit_theory3) %>%
arrange(-mi) %>%
head(10)
anova(
fit_theory
, fit_theory2
, fit_theory2b
, fit_theory3
)
parameterestimates(fit_theory2b)
fitmeasures(fit_theory3)
library(scales)
df_fitted <- data.frame(predict(fit_theory2b))
# -> Scale all the variables from 0 to 10
df_fitted <- df_fitted %>%
sapply(rescale, c(0, 10)) %>%
round(digits = 2) %>%
as.data.frame()
# fit_theory2b
plot(df_fitted)
lm_fitted <- lm(outcomes ~
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
df_fitted
)
summary(lm_fitted)
si_index <- rowMeans(df_fitted)
lm_index_fitted <- lm(si_index ~
outcomes +
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
df_fitted
)
summary(lm_index_fitted)
# Split into 2 groups
inds <- sample(2, nrow(df_fitted), replace = T, prob = c(0.8, 0.2))
train <- df_fitted[inds == 1, ]
test <- df_fitted[inds == 2, ]
library(MASS)
colnames(df_fitted)
ord_log_model <- polr(
as.factor(outcomes) ~
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
train,
Hess = T
)
summary(ord_log_model)
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t-value"]), lower.tail = F) * 2
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- "p value" = p)
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- cbind("p value" = p))
train[1:5]
train[1:5, ]
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
pred
print(pred, digits = 3)
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 3)
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 2)
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 1)
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 2)
train[1:5, ]
ord_log_model <- polr(
as.factor(outcomes) ~ .,
train,
Hess = T
)
library(MASS)
colnames(df_fitted)
ord_log_model <- polr(
as.factor(outcomes) ~ .,
train,
Hess = T
)
summary(ord_log_model)
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- cbind("p value" = p))
train[1:5, ]
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 2)
plot(pred)
hist(pred)
barchart(pred)
colnames(pred)[apply(pred, 1, which.max)]
library(MASS)
colnames(df_fitted)
ord_log_model <- polr(
as.factor(outcomes) ~
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
train,
Hess = T
)
summary(ord_log_model)
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- cbind("p value" = p))
#| echo: false
#| warning: false
#| message: false
#| include: false
library(psych)
library(plotly)
library(lavaan)
library(tidyverse)
library(dplyr)
setwd("../../utku_SIVOCS/")
source("./02_analysis/02_static_responses.R")
source("./02_analysis/99_question_groups.R")
# Load the feature importances from python script
feature_list <- read.csv("./02_analysis/PFA_feature_importance.csv")
features_to_rm <- tail(feature_list$X0, 40)
# Qualitatively select the worse performing features
features_to_rm <- features_to_rm[c(22,26,29:40)]
features_to_rm <- c(features_to_rm,
"dissChannels.trad.",
"dissChannels.socmed.",
"dissChannels.consult.",
"dissChannels.events.",
"dissChannels.public.",
"concepts.data.",
"concepts.code.",
"concepts.infra.",
"contribToSI.rate.",
"groupsInvolved.res.",
"natureOfInvolvement.res.",
"contribToSI.rate.",
"concepts2"
)
# remove the weak features
df_red <- feat_df.num_o[, !(colnames(feat_df.num_o ) %in% features_to_rm)]
## SI Familiarity Factor
factor_1 <- c("familiarWithSI.response.", "transdisciplinaryExp.rate.")
df_red <- df_red %>%
dplyr::select(-all_of(factor_1))
## MISC:business
factor_busi <- c("groupsInvolved.busi.", "impactTargetGroup.busi.", "kindOfChange.busi.")
df_red <- df_red %>%
dplyr::select(-all_of(factor_busi))
## MISC:scalability
factor_scale <- c("scalabilityRating.up.", "scalabilityRating.out.", "scalabilityRating.deep.")
df_red <- df_red %>%
dplyr::select(-all_of(factor_scale))
colnames(df_red)
df_model <- feat_df.num_o %>%
dplyr::select(-all_of(c(factor_1, "contribToSI.rate.")))
colnames(df_model)
library(nFactors)
ev <- eigen(cor(df_red)) # get eigenvalues
ap <- parallel(subject=nrow(df_red),var=ncol(df_red),
rep=1000,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)  # 9 Factors
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 8 factors,
# with varimax rotation
fit <- factanal(df_red, 7, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
model_theory <-"
## intention_agency
ia_human_condition =~ motivation.welfare.+benefitForNonAcademy+impulseForNonAcad.soc.+targetGroupsGoals.improve.+impulseForNonAcad.health.+impulseForNonAcad.ecol.+kindOfChange.pub.+kindOfChange.socgr.+kindOfChange.welfare.+kindOfChange.civsoc.
ia_non_academic =~ impulseForNonAcad.econ.+impulseForNonAcad.tech.
## transdisciplinary_apects
transdisciplinary_social =~ groupsInvolved.citiz.+groupsInvolved.civsoc.+groupsInvolved.welfare.+natureOfInvolvement.citiz.+natureOfInvolvement.civsoc.+natureOfInvolvement.welfare.+targetGroupsGoals.socneeds.+targetGroupsGoals.socgroups.+targetGroupsGoals.empower.+targetGroupsGoals.diversity.
outcome =~ impactTargetGroup.pub.+impactTargetGroup.socgr.+impactTargetGroup.welfare.+impactTargetGroup.civsoc.+Impactstatements.capab.+Impactstatements.emanc.+Impactstatements.understanding.+Impactstatements.mitig.+Impactstatements.unknown.+Impactstatements.unaddressed.
## MISC:policy
policy =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+groupsInvolved.policy.+adoptByPolicyHow.SQ001."
model_theory2 <-"
# SOLUTION ORIENTATION
ia_human_condition =~
motivation.welfare. +
benefitForNonAcademy +
impulseForNonAcad.soc. +
targetGroupsGoals.improve.
ia_nonacad_impulse =~
impulseForNonAcad.econ. +
impulseForNonAcad.tech. +
impulseForNonAcad.health. +
impulseForNonAcad.ecol.
#  ACTORS & NETWORKS
transdisciplinary_involvement =~
groupsInvolved.citiz. +
groupsInvolved.civsoc. +
groupsInvolved.welfare. +
natureOfInvolvement.citiz. +
natureOfInvolvement.civsoc. +
natureOfInvolvement.welfare.
transdisciplinary_goals =~
targetGroupsGoals.socneeds. +
targetGroupsGoals.socgroups. +
targetGroupsGoals.empower. +
targetGroupsGoals.diversity.
# NOVELTY
innovativeness =~
kindOfChange.pub. +
kindOfChange.socgr. +
kindOfChange.welfare. +
kindOfChange.civsoc.
# OUTCOME
outcomes =~
impactTargetGroup.pub. +
impactTargetGroup.socgr. +
impactTargetGroup.welfare. +
impactTargetGroup.civsoc. +
Impactstatements.capab. +
Impactstatements.emanc. +
Impactstatements.understanding. +
Impactstatements.mitig. +
Impactstatements.unknown. +
Impactstatements.unaddressed.
# MISC:policy
policy =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+groupsInvolved.policy.+adoptByPolicyHow.SQ001."
model_theory3 <-"
# SOLUTION ORIENTATION
ia_human_condition =~
motivation.welfare. +
benefitForNonAcademy +
impulseForNonAcad.soc. +
targetGroupsGoals.improve.
ia_nonacad_impulse =~
impulseForNonAcad.econ. +
impulseForNonAcad.tech. +
impulseForNonAcad.health. +
impulseForNonAcad.ecol.
#  ACTORS & NETWORKS
transdisciplinary_involvement =~
groupsInvolved.citiz. +
groupsInvolved.civsoc. +
groupsInvolved.welfare. +
groupsInvolved.policy. +
natureOfInvolvement.citiz. +
natureOfInvolvement.civsoc. +
natureOfInvolvement.welfare. +
natureOfInvolvement.policy.
transdisciplinary_goals =~
targetGroupsGoals.socneeds. +
targetGroupsGoals.socgroups. +
targetGroupsGoals.empower. +
targetGroupsGoals.diversity.
# NOVELTY
innovativeness =~
kindOfChange.pub. +
kindOfChange.socgr. +
kindOfChange.welfare. +
kindOfChange.civsoc. +
kindOfChange.policy.
# OUTCOME
outcome =~
impactTargetGroup.pub. +
impactTargetGroup.socgr. +
impactTargetGroup.welfare. +
impactTargetGroup.civsoc. +
impactTargetGroup.policy. +
Impactstatements.capab. +
Impactstatements.emanc. +
Impactstatements.understanding. +
Impactstatements.mitig. +
Impactstatements.unknown. +
Impactstatements.unaddressed. +
adoptByPolicyHow.SQ001.
"
fit_theory <- cfa(model_theory, df_model)
summary(fit_theory, fit.measures = T, standardized = T)
modificationindices(fit_theory) %>%
arrange(-mi) %>%
head(10)
fit_theory2 <- cfa(model_theory2, df_model)
# Scale using latent variable variance rather than the first factor loading
fit_theory2b <- cfa(model_theory2, df_model, std.lv = T)
summary(fit_theory2, fit.measures = T, standardized = T)
modificationindices(fit_theory2) %>%
arrange(-mi) %>%
head(10)
fit_theory3 <- cfa(model_theory3, df_model)
summary(fit_theory3, fit.measures = T, standardized = T)
modificationindices(fit_theory3) %>%
arrange(-mi) %>%
head(10)
anova(
fit_theory
, fit_theory2
, fit_theory2b
, fit_theory3
)
parameterestimates(fit_theory2b)
fitmeasures(fit_theory3)
library(scales)
df_fitted <- data.frame(predict(fit_theory2b))
# -> Scale all the variables from 0 to 10
df_fitted <- df_fitted %>%
sapply(rescale, c(0, 10)) %>%
round(digits = 2) %>%
as.data.frame()
# fit_theory2b
plot(df_fitted)
lm_fitted <- lm(outcomes ~
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
df_fitted
)
summary(lm_fitted)
si_index <- rowMeans(df_fitted)
lm_index_fitted <- lm(si_index ~
outcomes +
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
df_fitted
)
summary(lm_index_fitted)
# Split into 2 groups
inds <- sample(2, nrow(df_fitted), replace = T, prob = c(0.8, 0.2))
train <- df_fitted[inds == 1, ]
test <- df_fitted[inds == 2, ]
library(MASS)
colnames(df_fitted)
ord_log_model <- polr(
as.factor(outcomes) ~
ia_human_condition +
ia_nonacad_impulse +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness +
policy,
train,
Hess = T
)
summary(ord_log_model)
(ctable <- coef(summary(ord_log_model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = F) * 2
(ctable <- cbind("p value" = p))
train[1:5, ]
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 2)
colnames(pred)[apply(pred, 1,which.max)]
train[1:5, "outcomes"]
test[1:5, ]
test[1:5, "outcomes"]
pred2 <- predict(ord_log_model, test[1:5, ], type = "prob")
print(pred2, digits = 2)
colnames(pred2)[apply(pred2, 1,which.max)]
colnames(pred2)[apply(pred2, 1,which.max)]
(tab <- table(pred, train$outcomes))
pred
train$outcomes
pred3 <- predict(ord_log_model, train)
(tab <- table(pred, train$outcomes))
pred3 <- predict(ord_log_model, train)
(tab <- table(pred3, train$outcomes))
1- sum(diag(tab))/sum(tab)
(tab <- table(pred3, train$outcomes))
show(tab)
babap <- as.data.frame(tab)
View(babap)
(tab <- table(pred3, train$outcomes))
pred4 <- predict(ord_log_model, test)
(tab1 <- table(pred4, train$outcomes))
pred4 <- predict(ord_log_model, test)
(tab1 <- table(pred4, test$outcomes))
1- sum(diag(tab1))/sum(tab1)
## babap <- as.data.frame(tab1)
