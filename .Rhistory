library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
#setwd("/home/ubd/Nextcloud/utku_SIVOCS")
# Data Frame
source("./02_analysis/02_static_responses.R")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# setwd("/home/ubd/Nextcloud/utku_SIVOCS")
# Data Frame
source("./02_analysis/02_static_responses.R")
# setwd("/home/ubd/Nextcloud/utku_SIVOCS")
# Data Frame
getwd()
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# Data Frame
source("./02_analysis/02_static_responses.R")
library(fastDummies)
library(stringr)
data <- read.csv("./01_data/results-survey718586.csv")
# name the meta variables correctly
colnames(data)[142:ncol(data)] <- c("persID",
"gender",
"projID",
"title",
"discipline",
"funding",
"runtime"
)
# Create a df with only the questions
data.questions <- data[, 11:94]
# Handle disciplines
#setwd("/home/ubd/Nextcloud/utku_SIVOCS")
## disciplines <- read.csv("./DisciplinesPerFundingInstrument.csv", sep=";")
#--- Domains
## disc_df <- read.csv("disc_df.csv")
## data$domain <- disc_df$domain[as.vector(sapply(data$discipline, FUN = function(x) {which(x == disc_df$discipline)}))]
grant_df <- read.csv("./5555_preliminary_analysis/00_data/P3_GrantExport_with_abstracts.csv", sep=";")
match_grant_df <- grant_df[match(data$projID, grant_df$Project.Number), ]
domain <- unlist(lapply(str_split(match_grant_df$Discipline.Name.Hierarchy, ";"), `[[`, 1))
data$domain <- domain
data <- dummy_cols(data, select_columns = "domain")
colnames(data)[150] <- "Biology_and_Medicine"
colnames(data)[151] <- "SSH"
colnames(data)[152] <- "Math._Natur._and_Eng."
# A df with only numerical columns
data.num_questions <- data.questions[, as.vector(sapply(FUN=is.numeric, data.questions))]
# A df for python
write.csv(data, "./01_data/mod_data.csv")
write.csv(data.questions, "./01_data/mod_question_data.csv")
#--- Domains
## disc_df <- read.csv("disc_df.csv")
## data$domain <- disc_df$domain[as.vector(sapply(data$discipline, FUN = function(x) {which(x == disc_df$discipline)}))]
getwd()
#--- Domains
## disc_df <- read.csv("disc_df.csv")
## data$domain <- disc_df$domain[as.vector(sapply(data$discipline, FUN = function(x) {which(x == disc_df$discipline)}))]
grant_df <- read.csv("./5555_preliminary_analysis/00_data/P3_GrantExport_with_abstracts.csv", sep=";")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# Data Frame
source("./02_analysis/02_static_responses.R")
# colnames of the specific question groups
#source("./02_analysis/99_question_groups.R")
# A good table to display factor analysis
source("https://raw.githubusercontent.com/franciscowilhelm/r-collection/master/fa_table.R")
den <- read.csv("./01_data/sample_meta.csv")
domain_colors <- c("#FC4E07", "#E7B800", "#00AFBB")
knitr::opts_chunk$set(fig.retina=2, echo=FALSE, dev='svg', fig.width = 16)
data$domain[data$domain == unique(data$domain)[1]] <- "Math., Natur. and Eng. Sci."
g_tick_size_main <- 14
g_tick_size_side <- 12
library(devtools)
install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
install.packages("fastDummies")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# Data Frame
source("./02_analysis/02_static_responses.R")
# colnames of the specific question groups
#source("./02_analysis/99_question_groups.R")
# A good table to display factor analysis
source("https://raw.githubusercontent.com/franciscowilhelm/r-collection/master/fa_table.R")
den <- read.csv("./01_data/sample_meta.csv")
domain_colors <- c("#FC4E07", "#E7B800", "#00AFBB")
knitr::opts_chunk$set(fig.retina=2, echo=FALSE, dev='svg', fig.width = 16)
data$domain[data$domain == unique(data$domain)[1]] <- "Math., Natur. and Eng. Sci."
g_tick_size_main <- 14
g_tick_size_side <- 12
#bartlett.test(data=data, familiarWithSI.response. ~ domain)
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# Data Frame
source("./02_analysis/02_static_responses.R")
# colnames of the specific question groups
#source("./02_analysis/99_question_groups.R")
# A good table to display factor analysis
source("https://raw.githubusercontent.com/franciscowilhelm/r-collection/master/fa_table.R")
den <- read.csv("./01_data/sample_meta.csv")
domain_colors <- c("#FC4E07", "#E7B800", "#00AFBB")
knitr::opts_chunk$set(fig.retina=2, echo=FALSE, dev='svg', fig.width = 16)
data$domain[data$domain == unique(data$domain)[1]] <- "Math., Natur. and Eng. Sci."
g_tick_size_main <- 14
g_tick_size_side <- 12
bartlett.test(data=data, familiarWithSI.response. ~ domain)
kwtest <- kruskal.test(data=data, familiarWithSI.response. ~ domain)
kwtest
b1.wilcox <- pairwise.wilcox.test(data$familiarWithSI.response., data$domain, mu = 0, alt = "two.sided", conf.int = T, conf.level = 0.95, paired = F, correct = T, p.adjust="bonferroni" )
b1.wilcox
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache.extra = packageVersion("tufte")
)
options(htmltools.dir.version = FALSE)
library(dplyr)
library(plyr)
library(ggplot2)
library(ggbeeswarm)
library(plotly)
library(magrittr)
library(ggplot2)
library(PerformanceAnalytics)
library(psych)
library(corrplot)
library(nFactors)
library(kableExtra)
require(ggiraph)
require(ggiraphExtra)
require(plyr)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(gt)
library(grid)
library(ggpubr)
library(psych)
library(GPArotation)
library(car)
library(candisc)
library(jtools)
library(formattable)
# Activate likert and plyr
library(likert)
library(plyr)
library(ggcorrplot)
library(waffle)
library(hrbrthemes)
library(tidyverse)
library(scales)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(ggbiplot)
# Data Frame
source("./02_analysis/02_static_responses.R")
# colnames of the specific question groups
#source("./02_analysis/99_question_groups.R")
# A good table to display factor analysis
source("https://raw.githubusercontent.com/franciscowilhelm/r-collection/master/fa_table.R")
den <- read.csv("./01_data/sample_meta.csv")
domain_colors <- c("#FC4E07", "#E7B800", "#00AFBB")
knitr::opts_chunk$set(fig.retina=2, echo=FALSE, dev='svg', fig.width = 16)
data$domain[data$domain == unique(data$domain)[1]] <- "Math., Natur. and Eng. Sci."
g_tick_size_main <- 14
g_tick_size_side <- 12
bartlett.test(data=data, familiarWithSI.response. ~ domain)
kwtest <- kruskal.test(data=data, familiarWithSI.response. ~ domain)
kwtest
b1.wilcox <- pairwise.wilcox.test(data$familiarWithSI.response., data$domain, mu = 0, alt = "two.sided", conf.int = T, conf.level = 0.95, paired = F, correct = T, p.adjust="bonferroni" )
b1.wilcox
b1domain.df <-data.frame(familiarWithSI = data$familiarWithSI.response.,
domain =  data$domain)
b1domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
b1domain.df %>%
gather(key="domain", value="familiarWithSI") %>%
ggplot( aes(x=familiarWithSI, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank())+ scale_fill_discrete(name = "Domain") + xlab("Familiarity with SI") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
shapiro.test(data.questions$Impactstatements.understanding.)
shapiro.test(data.questions$groupsInvolved.citiz.)
kwtest <- kruskal.test(data=data.questions, Impactstatements.understanding. ~ groupsInvolved.citiz.)
kwtest
cor.test(data.questions$Impactstatements.understanding., data.questions$groupsInvolved.citiz., method="spearman", use = "complete.obs")
#--- Scatter plot
lm_scatter <- function(df, x, y, labx="", laby="", title="", posx=9, posy=0) {
ggplotly(
ggplot(df,
aes(y = y, x = x)) +
geom_point() +
ggtitle(title) +
geom_smooth(method=lm, se=TRUE, fullrange=TRUE, color='#e7298a')+
geom_jitter(color='#377eb8')+
theme_minimal() +
geom_point(color='#377eb8') +
labs(
y=laby,
x =labx) +
stat_cor(label.x = posx, label.y =posy , cor.coef.name = "rho", output.type = "text", method = "spearman") +
stat_regline_equation(output.type = "text",label.x = posx, label.y = posy +1)
)
}
lm_scatter(data.questions, y=data.questions$Impactstatements.understanding., x=data.questions$groupsInvolved.citiz., posx=0, posy=9,
laby="Deeper/better understanding of a specific social issue", labx="Involvement level of citizens")
pheno <- as.data.frame(table(data.questions$motivation.pheno.))
ggplot(data=pheno, aes(x=Var1, y=Freq)) +
geom_bar(stat="identity")
shapiro.test(data.questions$motivation.pheno.)
kwtest <- kruskal.test(data=data.questions, motivation.pheno. ~ domain)
kwtest
library(ggplot2)
library(ggbiplot)
library(psych)
# -------------------- PCA
# Are there completely NA colums?
sum(apply(FUN = sum,
MARGIN = 2,
apply(FUN = is.na,
MARGIN = 2,
data.num_questions)) == nrow(data.num_questions
)
)
pca_model <- prcomp(na.omit(data.num_questions),
scale = TRUE,
center = TRUE)
#plot(pca_model$x[, 1], pca_model$x[, 2])
# How much variation in each component
pca_model.var <- pca_model$sdev^2
pca_model.var_per <- cumsum(pca_model.var)/sum(pca_model.var)
barplot(pca_model.var_per,
main = "Scree Plot")
# Visualisation of all components
ggbiplot(pca_model)
# Most important features
loading_scores <- abs(pca_model$rotation[, 1])
loading_scores.ranked <- sort(loading_scores, decreasing = TRUE)
top_10_features <- loading_scores.ranked[1:10]
top_10_features
parallel <- fa.parallel(data.num_questions,
fm = "minres",
fa = 'fa')
factors <- fa(data.num_questions,
nfactors = 10,
rotate = 'oblimin',
fm = 'minres')
print(factors)
library(lavaan)
model <- '
F1 =~ groupsInvolved.civsoc.+groupsInvolved.citiz.+groupsInvolved.welfare.+targetGroupsGoals.socneeds.+targetGroupsGoals.socgroups.+targetGroupsGoals.empower.
F2 =~ adoptByPolicy.rate.+Impactstatements.capab.+Impactstatements.emanc.+Impactstatements.understanding.+Impactstatements.mitig.+Impactstatements.unknown.+Impactstatements.unaddressed.
F3 =~ concepts.pub.+concepts.data.+concepts.code.+concepts.infra.+dissChannels.trad.+dissChannels.web.+dissChannels.platf.
F4 =~ targetGroupsGoals.diversity.
F5 =~ scalabilityRating.up.+scalabilityRating.out.+scalabilityRating.deep.
F6 =~ groupsInvolved.policy.+impactTargetGroup.policy.+dissChannels.policy.
F7 =~ transdisciplinaryExp.rate.+groupsInvolved.busi.+impactTargetGroup.pub.+impactTargetGroup.busi.
F8 =~ dissChannels.conf.
F9 =~ contribToSI.rate.
F10 =~ motivation.pheno.+motivation.prob.
'
fit <- cfa(model, data = data.num_questions, )
summary(fit, fit.measures=TRUE, standardized=TRUE)
capabilities()
warnings()
warnings()
warnings()
warnings()
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
