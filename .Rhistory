# Load the feature importances from python script
feature_list <- read.csv("./02_analysis/PFA_feature_importance.csv")
feature_list$X0
fig <- plot_ly(data = feature_list, x = X1, y = X0, type = 'bar', orientation = 'h')
fig <- plot_ly(x = feature_list$X1, y = feature_list$X0, type = 'bar', orientation = 'h')
fig
fig <- plot_ly(x = feature_list$X1, y = feature_list$X0, type = 'bar', orientation = 'h')
fig
source("./02_analysis/02_static_responses.R")
# Load the feature importances from python script
feature_list <- read.csv("./02_analysis/PFA_feature_importance.csv")
fig <- plot_ly(x = feature_list$X1,
y = factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE) ,
type = 'bar',
orientation = 'h'
)
fig <- plot_ly(x = feature_list$X1,
y = factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)] ,
type = 'bar',
orientation = 'h'
)
fig
fig <- plot_ly(x = feature_list$X1,
y = factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)]) ,
type = 'bar',
orientation = 'h'
)
fig
unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)]
factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)])
feature_list$X0
unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)]
factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)])
factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)])
factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)])
factor(feature_list$X0, levels = unique(feature_list$X1)[order(feature_list$X1, decreasing = TRUE)])
feature_list$X0
fig <- plot_ly(x = feature_list$X1,
y = factor(feature_list$X0, levels = feature_list$X1[order(feature_list$X1, decreasing = TRUE)]) ,
type = 'bar',
orientation = 'h'
)
fig <- plot_ly(x = feature_list$X1,
y = feature_list$X0,
type = 'bar',
orientation = 'h'
) %>%
layout(xaxis = list(categoryorder = "total descending"))
fig
fig <- plot_ly(x = feature_list$X1,
y = feature_list$X0,
type = 'bar',
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "total descending"))
fig
fig <- plot_ly(x = feature_list$X1,
y = feature_list$X0,
type = 'bar',
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "total ascending"))
fig
feature_list
# Qualitatively select the worse performing features
features_to_rm <- features_to_rm[c(22,26,29:40)]
features_to_rm <- c(features_to_rm,
"dissChannels.trad.",
"dissChannels.socmed.",
"dissChannels.consult.",
"dissChannels.events.",
"dissChannels.public.",
"concepts.data.",
"concepts.code.",
"concepts.infra.",
"contribToSI.rate.",
"groupsInvolved.res.",
"natureOfInvolvement.res.",
"contribToSI.rate."
)
features_to_rm
features_to_rm <- tail(feature_list$X0, 40)
# Qualitatively select the worse performing features
features_to_rm <- features_to_rm[c(22,26,29:40)]
features_to_rm <- c(features_to_rm,
"dissChannels.trad.",
"dissChannels.socmed.",
"dissChannels.consult.",
"dissChannels.events.",
"dissChannels.public.",
"concepts.data.",
"concepts.code.",
"concepts.infra.",
"contribToSI.rate.",
"groupsInvolved.res.",
"natureOfInvolvement.res.",
"contribToSI.rate."
)
features_to_rm
source("./02_analysis/02_static_responses.R")
# Load the feature importances from python script
feature_list <- read.csv("./02_analysis/PFA_feature_importance.csv")
library(psych)
library(plotly)
fig <- plot_ly(x = feature_list$X1,
y = feature_list$X0,
type = 'bar',
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "total ascending"))
fig
features_to_rm <- tail(feature_list$X0, 40)
# Qualitatively select the worse performing features
features_to_rm <- features_to_rm[c(22,26,29:40)]
features_to_rm <- c(features_to_rm,
"dissChannels.trad.",
"dissChannels.socmed.",
"dissChannels.consult.",
"dissChannels.events.",
"dissChannels.public.",
"concepts.data.",
"concepts.code.",
"concepts.infra.",
"contribToSI.rate.",
"groupsInvolved.res.",
"natureOfInvolvement.res.",
"contribToSI.rate."
)
# remove the weak features
df_red <- feat_df.num_o[, !(colnames(feat_df.num_o ) %in% features_to_rm)]
features_to_rm
library(nFactors)
ev <- eigen(cor(df_red)) # get eigenvalues
ap <- parallel(subject=nrow(df_red),var=ncol(df_red),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)  # 9 Factors
library(nFactors)
ev <- eigen(cor(df_red)) # get eigenvalues
ap <- parallel(subject=nrow(df_red),var=ncol(df_red),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)  # 9 Factors
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(df_red) # graphs generated automatically
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(df_red, 8, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
plot(load,type="n") # set up plot
text(load,labels=names(df_red),cex=.7) # add variable names
fit$loadings
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(df_red, 8, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
#plot(load,type="n") # set up plot
text(load,labels=names(df_red),cex=.7) # add variable names
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(df_red, 8, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
load <- fit$loadings[,1:2]
#plot(load,type="n") # set up plot
#text(load,labels=names(df_red),cex=.7) # add variable names
fit$loadings
fit$loadings
print(fit, digits=2, cutoff=.3, sort=TRUE)
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(df_red, 8, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
#load <- fit$loadings[,1:2]
#plot(load,type="n") # set up plot
#text(load,labels=names(df_red),cex=.7) # add variable names
#fit$loadings
summary(fit_theory, fit.measures=TRUE, standardized = TRUE)
summary(fit_efa, fit.measures=TRUE, standardized = TRUE)
lavInspect(fit_theory, "cov.lv")
lavInspect(fit_efa, "cov.lv")
summary(fit_theory, fit.measures=TRUE, standardized = TRUE)
modificationindices(fit_theory) %>% arrange(-mi) %>% head(10)
modificationindices(fit_efa) %>% arrange(-mi) %>% head(10)
summary(fit_theory, fit.measures=TRUE, standardized = TRUE)
summary(fit_efa, fit.measures=TRUE, standardized = TRUE)
modificationindices(fit_theory) %>% arrange(-mi) %>% head(10)
modificationindices(fit_efa) %>% arrange(-mi) %>% head(10)
library(lavaan)
DF.refined <- data.frame(predict(fit_theory))
a <- scales::rescale(apply(DF.refined, mean, MARGIN = 1), to = c(0, 10))
b <- feat_df.num_o$contribToSI.rate.
c <- 1:length(a)
ab <- as.data.frame(cbind(a,b,c))
library(ggplot2)
ggplot(ab, aes(x = c)) +
geom_line(aes(y = a), color = "darkred") +
geom_line(aes(y = b), color="steelblue")
DF.refined2 <- data.frame(predict(fit_efa))
d <- scales::rescale(apply(DF.refined2, mean, MARGIN = 1), to = c(0, 10))
db <- as.data.frame(cbind(d,b,c))
ggplot(db, aes(x = c)) +
geom_line(aes(y = d), color = "darkred") +
geom_line(aes(y = b), color="steelblue")
source("./02_analysis/02_static_responses.R")
# Load the feature importances from python script
feature_list <- read.csv("./02_analysis/PFA_feature_importance.csv")
library(psych)
library(plotly)
library(lavaan)
fig <- plot_ly(x = feature_list$X1,
y = feature_list$X0,
type = 'bar',
orientation = 'h'
) %>%
layout(yaxis = list(categoryorder = "total ascending"))
fig
features_to_rm <- tail(feature_list$X0, 40)
# Qualitatively select the worse performing features
features_to_rm <- features_to_rm[c(22,26,29:40)]
features_to_rm <- c(features_to_rm,
"dissChannels.trad.",
"dissChannels.socmed.",
"dissChannels.consult.",
"dissChannels.events.",
"dissChannels.public.",
"concepts.data.",
"concepts.code.",
"concepts.infra.",
"contribToSI.rate.",
"groupsInvolved.res.",
"natureOfInvolvement.res.",
"contribToSI.rate."
)
# remove the weak features
df_red <- feat_df.num_o[, !(colnames(feat_df.num_o ) %in% features_to_rm)]
features_to_rm
library(nFactors)
ev <- eigen(cor(df_red)) # get eigenvalues
ap <- parallel(subject=nrow(df_red),var=ncol(df_red),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)  # 9 Factors
# PCA Variable Factor Map
library(FactoMineR)
result <- PCA(df_red) # graphs generated automatically
# --- FA explanatory
# Maximum Likelihood Factor Analysis
# entering raw data and extracting 3 factors,
# with varimax rotation
fit <- factanal(df_red, 8, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
#load <- fit$loadings[,1:2]
#plot(load,type="n") # set up plot
#text(load,labels=names(df_red),cex=.7) # add variable names
#fit$loadings
model_theory <-"
## SI Familiarity
fam =~ familiarWithSI.response.+transdisciplinaryExp.rate.
## intention_agency
ia_human_condition =~ motivation.welfare.+benefitForNonAcademy+impulseForNonAcad.soc.+targetGroupsGoals.improve.+impulseForNonAcad.health.+impulseForNonAcad.ecol.
ia_non_academic =~ impulseForNonAcad.econ.+impulseForNonAcad.tech.
## transdisciplinary_apects
transdisciplinary_social =~ groupsInvolved.citiz.+groupsInvolved.civsoc.+groupsInvolved.welfare.+natureOfInvolvement.citiz.+natureOfInvolvement.civsoc.+natureOfInvolvement.welfare.+targetGroupsGoals.socneeds.+targetGroupsGoals.socgroups.+targetGroupsGoals.empower.+targetGroupsGoals.diversity.
## outcome
outcome_public =~ impactTargetGroup.pub.+impactTargetGroup.socgr.+impactTargetGroup.welfare.+impactTargetGroup.civsoc.+kindOfChange.pub.+kindOfChange.socgr.+kindOfChange.welfare.+kindOfChange.civsoc.
outcome_statement =~ Impactstatements.capab.+Impactstatements.emanc.+Impactstatements.understanding.+Impactstatements.mitig.+Impactstatements.unknown.+Impactstatements.unaddressed.
## MISC:scalability
scale =~ scalabilityRating.up.+scalabilityRating.out.+scalabilityRating.deep.
## MISC:policy
policy =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+groupsInvolved.policy.+adoptByPolicyHow.SQ001.
## MISC:business
busi =~ groupsInvolved.busi.+impactTargetGroup.busi.+kindOfChange.busi.
"
model_efa <- "
f1 =~ impulseForNonAcad.soc.+groupsInvolved.citiz.+targetGroupsGoals.socneeds.+targetGroupsGoals.socgroups.+impactTargetGroup.socgr.+Impactstatements.capab.+Impactstatements.emanc.+Impactstatements.understanding.+Impactstatements.mitig.+transdisciplinaryExp.rate.+familiarWithSI.response.
f2 =~ motivation.welfare.+benefitForNonAcademy+targetGroupsGoals.improve.+impulseForNonAcad.health.+impactTargetGroup.pub.
f3 =~ groupsInvolved.policy.+impactTargetGroup.policy.+kindOfChange.policy.+natureOfInvolvement.policy.+impulseForNonAcad.econ.+natureOfInvolvement.policy.
f4 =~ groupsInvolved.welfare.+natureOfInvolvement.welfare.+impactTargetGroup.welfare.+kindOfChange.welfare.
f5 =~ groupsInvolved.civsoc.+natureOfInvolvement.civsoc.+impactTargetGroup.civsoc.+kindOfChange.civsoc.
f6 =~ impactTargetGroup.busi.+kindOfChange.busi.+groupsInvolved.busi.
f7 =~ scalabilityRating.up.+scalabilityRating.out.+scalabilityRating.deep.
f8 =~ kindOfChange.pub.+kindOfChange.socgr.+kindOfChange.acad.
"
fit_theory <- cfa(model_theory, df_red)
fit_efa <- cfa(model_efa, df_red)
modificationindices(fit_theory) %>% arrange(-mi) %>% head(10)
modificationindices(fit_efa) %>% arrange(-mi) %>% head(10)
anova(fit_theory, fit_efa)
DF.refined <- data.frame(predict(fit_theory))
a <- scales::rescale(apply(DF.refined, mean, MARGIN = 1), to = c(0, 10))
b <- feat_df.num_o$contribToSI.rate.
c <- 1:length(a)
ab <- as.data.frame(cbind(a,b,c))
library(ggplot2)
ggplot(ab, aes(x = c)) +
geom_line(aes(y = a), color = "darkred") +
geom_line(aes(y = b), color="steelblue")
DF.refined2 <- data.frame(predict(fit_efa))
d <- scales::rescale(apply(DF.refined2, mean, MARGIN = 1), to = c(0, 10))
db <- as.data.frame(cbind(d,b,c))
ggplot(db, aes(x = c)) +
geom_line(aes(y = d), color = "darkred") +
geom_line(aes(y = b), color="steelblue")
var_prop_efa <- c(0.13,  0.06,    0.05,    0.05,    0.05,    0.05,    0.04,    0.03)
new_DF_refined2 <- as.data.frame( as.matrix(DF.refined2) %*% diag(var_prop_efa))
f <- scales::rescale(apply(new_DF_refined2, mean, MARGIN = 1), to = c(0, 10))
data <- data.fra(a,b,c,d)
data <- data.frame(a,b,c,d)
fig <- plot_ly(data, x = ~c, y = ~a, name = 'theory', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~b, name = 'contribToSI.rate', mode = 'lines')
fig <- fig %>% add_trace(y = ~c, name = 'efa', mode = 'line')
fig <- fig %>% add_trace(y = ~d, name = 'efa_scaled', mode = 'line')
fig
data <- data.frame(a,b,c,d,f)
fig <- plot_ly(data, x = ~c, y = ~a, name = 'theory', type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y = ~b, name = 'contribToSI.rate', mode = 'lines')
fig <- fig %>% add_trace(y = ~d, name = 'efa', mode = 'line')
fig <- fig %>% add_trace(y = ~f, name = 'efa_scaled', mode = 'line')
fig
fig = make_subplots(rows=4, cols=1)
fig = make_subplots(rows=4, cols=1)
fig = make_subplots(rows=4, cols=1)
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines+markers')
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines+markers')
fig3 <- plot_ly(x = data$c, y = data$c, type = 'scatter', mode = 'lines+markers')
fig <- subplot(fig1, fig2, fig3, nrows = 3) %>%
layout(title = list(text = "Stacked Subplots"),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines')
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines')
fig3 <- plot_ly(x = data$c, y = data$c, type = 'scatter', mode = 'lines')
fig <- subplot(fig1, fig2, fig3, nrows = 3) %>%
layout(title = list(text = "Stacked Subplots"),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines')
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines')
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines')
fig <- subplot(fig1, fig2, fig3, nrows = 3) %>%
layout(title = list(text = "Stacked Subplots"),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines')
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines')
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines')
fig3 <- plot_ly(x = data$c, y = data$f, type = 'scatter', mode = 'lines')
fig <- subplot(fig1, fig2, fig3, nrows = 3) %>%
layout(title = list(text = ""),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines', name="theory")
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines', name="contribToSI")
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines', name="efa")
fig3 <- plot_ly(x = data$c, y = data$f, type = 'scatter', mode = 'lines', name="efa_scaled")
fig <- subplot(fig1, fig2, fig3, nrows = 3) %>%
layout(title = list(text = ""),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines', name="theory")
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines', name="contribToSI")
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines', name="efa")
fig3 <- plot_ly(x = data$c, y = data$f, type = 'scatter', mode = 'lines', name="efa_scaled")
fig <- subplot(fig1, fig2, fig3, fig4, nrows = 4) %>%
layout(title = list(text = ""),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines', name="theory")
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines', name="contribToSI")
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines', name="efa")
fig4 <- plot_ly(x = data$c, y = data$f, type = 'scatter', mode = 'lines', name="efa_scaled")
fig <- subplot(fig1, fig2, fig3, fig4, nrows = 4) %>%
layout(title = list(text = ""),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
matrix(df_red) diag(feature_list_red$logX)
feature_list_red$logX
feature_list_red <- feature_list[!(feature_list$X0 %in% features_to_rm),]
feature_list_red$logX <-  log(feature_list_red$X1)
data$g <- feature_list_red$logX
feature_list_red <- feature_list[!(feature_list$X0 %in% features_to_rm),]
feature_list_red$logX <-  log(feature_list_red$X1)
data$g <- feature_list_red$logX
feature_list_red$logX
feature_list_red <- feature_list[!(feature_list$X0 %in% features_to_rm),]
feature_list_red$logX <-  log(feature_list_red$X1)
df_red2 <- df_red
for (i in seq_along(feature_list_red$logX)) {
df_red2[, i] <- df_red2[, i] * feature_list_red$logX[i]
}
g <- scales::rescale(apply(df_red2, mean, MARGIN = 1), to = c(0, 10))
data$g <- g
library(plotly)
fig1 <- plot_ly(x = data$c, y = data$a, type = 'scatter', mode = 'lines', name="theory")
fig2 <- plot_ly(x = data$c, y = data$b, type = 'scatter', mode = 'lines', name="contribToSI")
fig3 <- plot_ly(x = data$c, y = data$d, type = 'scatter', mode = 'lines', name="efa")
fig4 <- plot_ly(x = data$c, y = data$f, type = 'scatter', mode = 'lines', name="efa_scaled")
fig5 <- plot_ly(x = data$c, y = data$g, type = 'scatter', mode = 'lines', name="log(pfa)")
fig <- subplot(fig1, fig2, fig3, fig4, fig5, nrows = 5) %>%
layout(title = list(text = ""),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
aggregate( a ~ b , data = data , sum , na.rm = TRUE )
mean(aggregate( a ~ b , data = data , sum , na.rm = TRUE ))
aggregate( a ~ b , data = data , sum , na.rm = TRUE )
data$b
aggregate( a ~ b , data = data , sum , na.rm = TRUE )
mean(aggregate( a ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( a ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( c ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( d ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( f ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( g ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( a ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( c ~ b , data = data , sum , na.rm = TRUE )$c)
mean(aggregate( d ~ b , data = data , sum , na.rm = TRUE )$d)
mean(aggregate( f ~ b , data = data , sum , na.rm = TRUE )$f)
mean(aggregate( g ~ b , data = data , sum , na.rm = TRUE )$g)
mean(aggregate( a ~ b , data = data , sum , na.rm = TRUE )$a)
mean(aggregate( d ~ b , data = data , sum , na.rm = TRUE )$d)
mean(aggregate( f ~ b , data = data , sum , na.rm = TRUE )$f)
mean(aggregate( g ~ b , data = data , sum , na.rm = TRUE )$g)
mean(a-b)
mean(d-b)
mean(f-b)
mean(g-b)
