transdisciplinary_goals +
innovativeness,
train_2,
Hess = T
)
multi_log_model.3_sum <- summary(multi_log_model.3)
w <- multi_log_model.3_sum$coefficients / multi_log_model.3_sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
anova(multi_log_model.2, multi_log_model.3, test = "Chisq")
# We can correct the variables with low explanatory power with AIC
multi_log_model.4 <- stepAIC(multi_log_model.2, direction = "both", k = log(dim(train_2))[1])
summary(multi_log_model.4)
anova(multi_log_model.2, multi_log_model.4, test = "Chisq")
predictions.2 <- predict(multi_log_model.2, test_2, type = "probs")
cbind(test_2, round(predictions.2, 2))
accurracy.2 <- sum(predict(multi_log_model.2, test_2) == test_2$outcomes_3) / 75
confusion_matrix.2 <- table(predict(multi_log_model.2, test_2), test_2$outcomes_3)
predictions.2_train <- predict(multi_log_model.2, train_2, type = "probs")
cbind(train_2, round(predictions.2_train, 2))
accurracy.2_train <- sum(predict(multi_log_model.2, train_2) == train_2$outcomes_3) / length( train_2$outcomes_3)
confusion_matrix.2_train <- table(predict(multi_log_model.2, train_2), train_2$outcomes_3)
predictions.4 <- predict(multi_log_model.4, test_2, type = "probs")
accurracy.4 <- sum(predict(multi_log_model.4, test_2) == test_2$outcomes_3) / 75
par(mfrow = c(2, 3))
plot(df_indexes$ia_human_condition, df_indexes$transdisciplinary_involvement, lwd = 2, lty = 1, main = "lty = 1")
pl
plot(
df_indexes$ia_human_condition
, df_indexes$transdisciplinary_involvement
, lwd = 2
, lty = 1
, main =1
, "lty = 1"
)
plot(df_indexes[, 1:5])
source("./07_model_new/05_logit_model.R")
library(nnet)
#multi_log_model <- multinom(as.factor(round(outcomes)) ~
multi_log_model <- multinom(round(outcomes) ~
ia_human_condition +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train,
Hess = T
)
multi_log_model.sum <- summary(multi_log_model)
w <- multi_log_model.sum$coefficients / multi_log_model.sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
# Reduce the levels of "outcomes" to 4 levels
df_indexes$outcomes_3 <-  ifelse(
df_indexes$outcomes > 7, 3,
ifelse(
df_indexes$outcomes > 4, 2,
ifelse(df_indexes$outcomes > 1, 1, 0)
)
)
# Train-test split with 4 outcome categories
inds_2 <- sample(2, nrow(df_indexes), replace = T, prob = c(0.8, 0.2))
train_2 <- df_indexes[inds_2 == 1, ]
test_2 <- df_indexes[inds_2 == 2, ]
multi_log_model.2 <- multinom(outcomes_3 ~
ia_human_condition +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train_2,
Hess = T
)
multi_log_model.2_sum <- summary(multi_log_model.2)
w <- multi_log_model.2_sum$coefficients / multi_log_model.2_sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
# Another Model without ia_human_condition
multi_log_model.3 <- multinom(outcomes_3 ~
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train_2,
Hess = T
)
multi_log_model.3_sum <- summary(multi_log_model.3)
w <- multi_log_model.3_sum$coefficients / multi_log_model.3_sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
anova(multi_log_model.2, multi_log_model.3, test = "Chisq")
# We can correct the variables with low explanatory power with AIC
multi_log_model.4 <- stepAIC(multi_log_model.2, direction = "both", k = log(dim(train_2))[1])
summary(multi_log_model.4)
anova(multi_log_model.2, multi_log_model.4, test = "Chisq")
predictions.2 <- predict(multi_log_model.2, test_2, type = "probs")
cbind(test_2, round(predictions.2, 2))
accurracy.2 <- sum(predict(multi_log_model.2, test_2) == test_2$outcomes_3) / 75
confusion_matrix.2 <- table(predict(multi_log_model.2, test_2), test_2$outcomes_3)
predictions.2_train <- predict(multi_log_model.2, train_2, type = "probs")
cbind(train_2, round(predictions.2_train, 2))
accurracy.2_train <- sum(predict(multi_log_model.2, train_2) == train_2$outcomes_3) / length( train_2$outcomes_3)
confusion_matrix.2_train <- table(predict(multi_log_model.2, train_2), train_2$outcomes_3)
predictions.4 <- predict(multi_log_model.4, test_2, type = "probs")
accurracy.4 <- sum(predict(multi_log_model.4, test_2) == test_2$outcomes_3) / 75
par(mfrow = c(2, 3))
plot(
df_indexes$ia_human_condition
, df_indexes$transdisciplinary_involvement
, lwd = 2
, lty = 1
, main =1
, "lty = 1"
)
plot(df_indexes[, 1:5])
source("./07_model_new/06_multinomial_logit_regression.R")
library(dplyr)
library(ggplot2)
summary(df_indexes$si_index.ord_weight)
df_indexes$si_index_3 <-  ifelse(
df_indexes$si_index.ord_weight > 7, 3,
ifelse(
df_indexes$si_index.ord_weight > 4, 2,
ifelse(df_indexes > 1, 1, 0)
)
)
df_meta_indexes <- as.data.frame(cbind(df_indexes, meta_df))
si_domain_0 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_0 = si_index_3 == 0) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_0 == T) %>%
as.data.frame()
si_domain_1 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_1 = si_index_3 == 1) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_1 == T) %>%
as.data.frame()
si_domain_2 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_2 = si_index_3 == 2) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_2 == T) %>%
as.data.frame()
si_domain_3 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_3 = si_index_3 == 3) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_3 == T) %>%
as.data.frame()
df_meta_indexes %>%
select(si_index.ord_weight, domain) %>%
group_by(si_index.ord_weight) %>%
summarise(n())
as.data.frame(table(df_meta_indexes$si_index_3, df_meta_indexes$domain ))
data <- df_meta_indexes
si_domain.df <-data.frame(si_index = data$si_index.ord_weight,
domain =  data$domain)
str(si_domain.df)
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank())+ scale_fill_discrete(name = "Domain") + xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
library(dplyr)
library(ggplot2)
library(tidyverse)
summary(df_indexes$si_index.ord_weight)
df_indexes$si_index_3 <-  ifelse(
df_indexes$si_index.ord_weight > 7, 3,
ifelse(
df_indexes$si_index.ord_weight > 4, 2,
ifelse(df_indexes > 1, 1, 0)
)
)
df_meta_indexes <- as.data.frame(cbind(df_indexes, meta_df))
si_domain_0 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_0 = si_index_3 == 0) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_0 == T) %>%
as.data.frame()
si_domain_1 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_1 = si_index_3 == 1) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_1 == T) %>%
as.data.frame()
si_domain_2 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_2 = si_index_3 == 2) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_2 == T) %>%
as.data.frame()
si_domain_3 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_3 = si_index_3 == 3) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_3 == T) %>%
as.data.frame()
df_meta_indexes %>%
select(si_index.ord_weight, domain) %>%
group_by(si_index.ord_weight) %>%
summarise(n())
as.data.frame(table(df_meta_indexes$si_index_3, df_meta_indexes$domain ))
data <- df_meta_indexes
si_domain.df <-data.frame(si_index = data$si_index.ord_weight,
domain =  data$domain)
str(si_domain.df)
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank())+ scale_fill_discrete(name = "Domain") + xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
df_meta_indexes$self_assessment <- feat_df.num_o$contribToSI.rate.
lm_scatter(df_meta_indexes, x = df_meta_indexes$si_index.ord_weight, y = df_meta_indexes$self_assessment,     laby="SI-Rating (Self Assessment)", labx = "SI-Index")
ggplot(si_domain_freq, aes(x = si_index_group, y = si_index_3, fill = domain)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain")
si_domain_freq
library(dplyr)
library(ggplot2)
library(tidyverse)
summary(df_indexes$si_index.ord_weight)
df_indexes$si_index_3 <-  ifelse(
df_indexes$si_index.ord_weight > 7, 3,
ifelse(
df_indexes$si_index.ord_weight > 4, 2,
ifelse(df_indexes > 1, 1, 0)
)
)
df_meta_indexes <- as.data.frame(cbind(df_indexes, meta_df))
si_domain_0 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_0 = si_index_3 == 0) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_0 == T) %>%
as.data.frame()
si_domain_1 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_1 = si_index_3 == 1) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_1 == T) %>%
as.data.frame()
si_domain_2 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_2 = si_index_3 == 2) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_2 == T) %>%
as.data.frame()
si_domain_3 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_3 = si_index_3 == 3) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_3 == T) %>%
as.data.frame()
df_meta_indexes %>%
select(si_index.ord_weight, domain) %>%
group_by(si_index.ord_weight) %>%
summarise(n())
as.data.frame(table(df_meta_indexes$si_index_3, df_meta_indexes$domain ))
data <- df_meta_indexes
si_domain.df <-data.frame(si_index = data$si_index.ord_weight,
domain =  data$domain)
str(si_domain.df)
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank())+ scale_fill_discrete(name = "Domain") + xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank()) +
xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
df_meta_indexes$self_assessment <- feat_df.num_o$contribToSI.rate.
lm_scatter(df_meta_indexes, x = df_meta_indexes$si_index.ord_weight, y = df_meta_indexes$self_assessment,     laby="SI-Rating (Self Assessment)", labx = "SI-Index")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(plotly)
summary(df_indexes$si_index.ord_weight)
df_indexes$si_index_3 <-  ifelse(
df_indexes$si_index.ord_weight > 7, 3,
ifelse(
df_indexes$si_index.ord_weight > 4, 2,
ifelse(df_indexes > 1, 1, 0)
)
)
df_meta_indexes <- as.data.frame(cbind(df_indexes, meta_df))
si_domain_0 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_0 = si_index_3 == 0) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_0 == T) %>%
as.data.frame()
si_domain_1 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_1 = si_index_3 == 1) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_1 == T) %>%
as.data.frame()
si_domain_2 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_2 = si_index_3 == 2) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_2 == T) %>%
as.data.frame()
si_domain_3 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_3 = si_index_3 == 3) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_3 == T) %>%
as.data.frame()
df_meta_indexes %>%
select(si_index.ord_weight, domain) %>%
group_by(si_index.ord_weight) %>%
summarise(n())
as.data.frame(table(df_meta_indexes$si_index_3, df_meta_indexes$domain ))
data <- df_meta_indexes
si_domain.df <-data.frame(si_index = data$si_index.ord_weight,
domain =  data$domain)
str(si_domain.df)
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank()) +
xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
df_meta_indexes$self_assessment <- feat_df.num_o$contribToSI.rate.
lm_scatter(
df_meta_indexes
, x = df_meta_indexes$si_index.ord_weight
, y = df_meta_indexes$self_assessment
, laby="SI-Rating (Self Assessment)"
, labx = "SI-Index"
)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(plotly)
library(ggpubr)
summary(df_indexes$si_index.ord_weight)
df_indexes$si_index_3 <-  ifelse(
df_indexes$si_index.ord_weight > 7, 3,
ifelse(
df_indexes$si_index.ord_weight > 4, 2,
ifelse(df_indexes > 1, 1, 0)
)
)
df_meta_indexes <- as.data.frame(cbind(df_indexes, meta_df))
si_domain_0 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_0 = si_index_3 == 0) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_0 == T) %>%
as.data.frame()
si_domain_1 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_1 = si_index_3 == 1) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_1 == T) %>%
as.data.frame()
si_domain_2 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_2 = si_index_3 == 2) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_2 == T) %>%
as.data.frame()
si_domain_3 <- df_meta_indexes %>%
dplyr::select(si_index_3, domain) %>%
dplyr::group_by(domain, si_3 = si_index_3 == 3) %>%
dplyr::summarise(si_index_3 = n()) %>%
filter(si_3 == T) %>%
as.data.frame()
df_meta_indexes %>%
select(si_index.ord_weight, domain) %>%
group_by(si_index.ord_weight) %>%
summarise(n())
as.data.frame(table(df_meta_indexes$si_index_3, df_meta_indexes$domain ))
data <- df_meta_indexes
si_domain.df <-data.frame(si_index = data$si_index.ord_weight,
domain =  data$domain)
str(si_domain.df)
## si_domain.df$familiarWithSI <- as.numeric(b1domain.df$familiarWithSI)
si_domain.df %>%
gather(key="domain", value="si_index") %>%
ggplot( aes(x=si_index, y=domain, fill=domain),  show.legend = FALSE) +
geom_boxplot() +
ylab(" ")+
theme_light() +
theme(axis.text.y=element_blank()) +
xlab("SI-Index") + scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain") +
scale_x_continuous(breaks = seq(0,10,2))
df_meta_indexes$self_assessment <- feat_df.num_o$contribToSI.rate.
lm_scatter(
df_meta_indexes
, x = df_meta_indexes$si_index.ord_weight
, y = df_meta_indexes$self_assessment
, laby="SI-Rating (Self Assessment)"
, labx = "SI-Index"
)
si_domain_freq <- rbind(
si_domain_0[, c(1,3)]
, si_domain_1[, c(1,3)]
, si_domain_2[, c(1,3)]
, si_domain_3[, c(1,3)]
)
si_domain_freq$si_index_group <- rep(0:3, each = 3)
ggplot(si_domain_freq, aes(x = si_index_group, y = si_index_3, fill = domain)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=c("#FC4E07", "#E7B800", "#00AFBB"), name="Domain")
plot(
df_indexes$ia_human_condition
, df_indexes$transdisciplinary_involvement
, lwd = 2
, lty = 1
, main =1
, "lty = 1"
)
plot(df_indexes[, 1:5])
accurracy.2
accurracy.4
source("./07_model_new/05_logit_model.R")
library(nnet)
#multi_log_model <- multinom(as.factor(round(outcomes)) ~
multi_log_model <- multinom(round(outcomes) ~
ia_human_condition +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train,
Hess = T
)
multi_log_model.sum <- summary(multi_log_model)
w <- multi_log_model.sum$coefficients / multi_log_model.sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
# Reduce the levels of "outcomes" to 4 levels
df_indexes$outcomes_3 <-  ifelse(
df_indexes$outcomes > 7, 3,
ifelse(
df_indexes$outcomes > 4, 2,
ifelse(df_indexes$outcomes > 1, 1, 0)
)
)
# Train-test split with 4 outcome categories
inds_2 <- sample(2, nrow(df_indexes), replace = T, prob = c(0.8, 0.2))
train_2 <- df_indexes[inds_2 == 1, ]
test_2 <- df_indexes[inds_2 == 2, ]
multi_log_model.2 <- multinom(outcomes_3 ~
ia_human_condition +
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train_2,
Hess = T
)
multi_log_model.2_sum <- summary(multi_log_model.2)
w <- multi_log_model.2_sum$coefficients / multi_log_model.2_sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
# Another Model without ia_human_condition
multi_log_model.3 <- multinom(outcomes_3 ~
transdisciplinary_involvement +
transdisciplinary_goals +
innovativeness,
train_2,
Hess = T
)
multi_log_model.3_sum <- summary(multi_log_model.3)
w <- multi_log_model.3_sum$coefficients / multi_log_model.3_sum$standard.errors
pval <- 2 * (1 - pnorm(abs(w)))
anova(multi_log_model.2, multi_log_model.3, test = "Chisq")
# We can correct the variables with low explanatory power with AIC
multi_log_model.4 <- stepAIC(multi_log_model.2, direction = "both", k = log(dim(train_2))[1])
summary(multi_log_model.4)
anova(multi_log_model.2, multi_log_model.4, test = "Chisq")
predictions.2 <- predict(multi_log_model.2, test_2, type = "probs")
cbind(test_2, round(predictions.2, 2))
accurracy.2 <- sum(predict(multi_log_model.2, test_2) == test_2$outcomes_3) / 75
confusion_matrix.2 <- table(predict(multi_log_model.2, test_2), test_2$outcomes_3)
predictions.2_train <- predict(multi_log_model.2, train_2, type = "probs")
cbind(train_2, round(predictions.2_train, 2))
accurracy.2_train <- sum(predict(multi_log_model.2, train_2) == train_2$outcomes_3) / length( train_2$outcomes_3)
confusion_matrix.2_train <- table(predict(multi_log_model.2, train_2), train_2$outcomes_3)
predictions.4 <- predict(multi_log_model.4, test_2, type = "probs")
accurracy.4 <- sum(predict(multi_log_model.4, test_2) == test_2$outcomes_3) / 75
par(mfrow = c(2, 3))
plot(
df_indexes$ia_human_condition
, df_indexes$transdisciplinary_involvement
, lwd = 2
, lty = 1
, main =1
, "lty = 1"
)
plot(df_indexes[, 1:5])
accurracy.4
