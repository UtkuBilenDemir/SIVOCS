nagelkerke(fit  = model.ord_weight,
null = modelnull.ord_weight)
summary(model.ord_weight)
source("./03_model/13_multinomial_logit.R")
source("./03_model/13_multinomial_logit.R")
source("./03_model/13_logit_models.R")
miro_features <- c(
"motivation.welfare."
, "benefitForNonAcademy"
, "impulseForNonAcad.soc."
, "targetGroupsGoals.improve."
, "targetGroupsGoals.empower."
, "Impactstatements.unknown."
, "groupsInvolved.civsoc."
, "groupsInvolved.policy."
, "groupsInvolved.citiz."
, "groupsInvolved.welfare."
, "natureOfInvolvement.civsoc."
, "natureOfInvolvement.policy."
, "natureOfInvolvement.citiz."
, "natureOfInvolvement.welfare."
, "targetGroupsGoals.socneeds."
, "targetGroupsGoals.socgroups."
, "scalabilityRating.out."
, "scalabilityRating.up."
, "targetGroupsGoals.diversity."
, "concepts3"
, "impactTargetGroup.pub."
, "impactTargetGroup.socgr."
, "impactTargetGroup.welfare."
, "impactTargetGroup.civsoc."
, "impactTargetGroup.policy."
, "kindOfChange.pub."
, "kindOfChange.socgr."
, "kindOfChange.welfare."
, "kindOfChange.civsoc."
, "kindOfChange.policy."
, "adoptByPolicy.rate."
, "Impactstatements.mitig."
, "Impactstatements.understanding."
, "Impactstatements.emanc."
, "Impactstatements.capab."
)
setdiff(miro_features, colnames(df_red))
df_red.miro <- as.data.frame(
cbind(
df_red
, feat_df.num_o[, c("scalabilityRating.out."
, "scalabilityRating.up."
,  "concepts3"
, "adoptByPolicy.rate."
)
]
)
)
df_miro <- df_red.miro[, miro_features]
#---
# -> TEST with efa
#---
# Scree Plot
#-------------------------------------------------------------------------------
ev <- eigen(cor(df_miro)) # get eigenvalues
ap <- parallel(
subject=nrow(df_miro)
, var=ncol(df_miro)
, rep=1000
, cent=.05
)
nS <- nScree(
x=ev$values
, aparallel = ap$eigen$qevpea
)
plotnScree(nS)  # 9 Factors
df_red.rescaled <- sapply(df_miro, scales::rescale, c(0,10))
df_red.rescaled <- na.omit(df_red.rescaled)
as.data.frame(df_red.rescaled)
efa_model <- fa.parallel(df_red.rescaled, fm = "ml", fa = "fa")
efa_model$fa.values  # 4 or 5 factors
# EFA with different number of factors
#-------------------------------------------------------------------------------
four_factor <- fa(df_red.rescaled, "varimax", fm = "ml", nfactors = 4)
print(four_factor, cut = .4, digits = 2)
five_factor <- fa(df_red.rescaled, "varimax", fm = "ml", nfactors = 5)
print(five_factor, cut = .4, digits = 2)
?fa
#-------------------------------------------------------------------------------
# -> when we reduce even more?
miro_features2 <- c("motivation.welfare."
, "benefitForNonAcademy"
, "impulseForNonAcad.soc."
, "targetGroupsGoals.improve."
, "groupsInvolved.civsoc."
, "groupsInvolved.citiz."
, "natureOfInvolvement.civsoc."
, "natureOfInvolvement.citiz."
, "Impactstatements.emanc."
, "Impactstatements.capab."
, "targetGroupsGoals.socneeds."
, "targetGroupsGoals.socgroups."
, "targetGroupsGoals.empower."
, "targetGroupsGoals.diversity."
, "scalabilityRating.out."
, "scalabilityRating.up."
, "Impactstatements.unknown."
, "Impactstatements.unaddressed."
, "kindOfChange.pub."
, "concepts3"
, "impactTargetGroup.pub."
, "impactTargetGroup.socgr."
, "impactTargetGroup.civsoc."
, "adoptByPolicy.rate."
, "Impactstatements.mitig."
, "Impactstatements.understanding."
)
df_miro2 <- df_red.miro[, miro_features2]
# Scree Plot
#-------------------------------------------------------------------------------
ev <- eigen(cor(df_miro2)) # get eigenvalues
ap <- parallel(
subject=nrow(df_miro2)
, var=ncol(df_miro2)
, rep=1000
, cent=.05
)
nS <- nScree(
x=ev$values
, aparallel = ap$eigen$qevpea
)
plotnScree(nS)  # 9 Factors
df_red.rescaled <- sapply(df_miro2, scales::rescale, c(0,10))
df_red.rescaled <- na.omit(df_red.rescaled)
as.data.frame(df_red.rescaled)
efa_model <- fa.parallel(df_red.rescaled, fm = "ml", fa = "fa")
efa_model$fa.values  # 4 or 5 factors
four_factor <- fa(df_red.rescaled, "varimax", fm = "ml", nfactors = 4)
print(four_factor, cut = .4, digits = 2)
five_factor <- fa(df_red.rescaled, "varimax", fm = "ml", nfactors = 5)
print(five_factor, cut = .4, digits = 2)
setdiff(colnames(df_red2), miro_features2 )
library(stats)
library(psych)
bartlett.test(df_model2)
KMO(df_model2)
source("./03_model/15_check_soundness_of_the_cfa_model.R")
# Create a df with metadata and cfa predicted df
cfa_pred_df <- as.data.frame(cbind(pred_df2, meta_df))
outcomes4 <- ifelse(
cfa_pred_df$outputs_outcomes<3, 0,
ifelse(cfa_pred_df$outputs_outcomes<6, 1,
ifelse(cfa_pred_df$outputs_outcomes<8, 2, 3
)
)
)
multi_log_model.domain <- multinom(domain  ~
solution_orientation +
an_transdisciplinary_inv +
an_transdisciplinary_goals +
novelty +
outputs_outcomes
,
cfa_pred_df,
Hess = T
)
summary(multi_log_model.domain)
# ------------------------------------------------------------------------------
# ORDINAL LOGIT
# PREDICTING OUTCOME
# 1. DV: OUTCOMES
ord_log_model <- polr(
as.factor(outputs_outcomes) ~
solution_orientation +
an_transdisciplinary_inv +
an_transdisciplinary_goals +
novelty,
cfa_pred_df,
Hess = T
)
ord_log_model.2 <- clm(
as.factor(outputs_outcomes) ~
solution_orientation +
an_transdisciplinary_inv +
an_transdisciplinary_goals +
novelty,
data = train,
link = "logit"
)
ord_log_model.2
summary(ord_log_model.2)
summary(ord_log_model)
pred <- predict(ord_log_model, train[1:5, ], type = "prob")
print(pred, digits = 3)
source("./03_model/16_predict_meta.R")
summary(
fit.final_model2
, fit.measures = T
, standardized = T
, rsq = T
)
parameterEstimates(fit.final_model2, standardized = TRUE)
#-------------------------------------------------------------------------------
# Visualise domains among factors
# Find the mean of each group
library(plyr)
cfa_pred_df.rating_mean <- ddply(cfa_pred_df, "domain", summarise, solution_orientation.rating.mean=mean(solution_orientation))
cfa_pred_df.rating_mean$an_transdisciplinary_inv.rating.mean <- ddply(cfa_pred_df, "domain", summarise, an_transdisciplinary_inv.rating.mean=mean(an_transdisciplinary_inv))$an_transdisciplinary_inv.rating.mean
cfa_pred_df.rating_mean$an_transdisciplinary_goals.rating.mean <- ddply(cfa_pred_df, "domain", summarise, an_transdisciplinary_goals.rating.mean=mean(an_transdisciplinary_goals))$an_transdisciplinary_goals.rating.mean
cfa_pred_df.rating_mean$novelty.rating.mean <- ddply(cfa_pred_df, "domain", summarise, novelty.rating.mean=mean(novelty))$novelty.rating.mean
cfa_pred_df.rating_mean$outputs_outcomes.rating.mean <- ddply(cfa_pred_df, "domain", summarise, outputs_outcomes.rating.mean=mean(outputs_outcomes))$outputs_outcomes.rating.mean
# Overlaid histograms with means
so_dist <- ggplot(cfa_pred_df, aes(x=solution_orientation, fill=domain)) +
geom_histogram( alpha=0.9, position="identity") +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
## geom_histogram(binwidth=.5, alpha=.5, position="identity") +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = solution_orientation.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("Solution Orientation")
trinv_dist <- ggplot(
cfa_pred_df
, aes(
x = an_transdisciplinary_inv
, fill=domain
)
) +
geom_histogram(
alpha=0.9
, position="identity"
) +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = an_transdisciplinary_inv.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("Transdisciplinary Involvement")
trgoals_dist <- ggplot(
cfa_pred_df
, aes(
x = an_transdisciplinary_goals
, fill=domain
)
) +
geom_histogram(
alpha=0.9
, position="identity"
) +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = an_transdisciplinary_goals.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("Transdisciplinary Goals")
novelty_dist <- ggplot(
cfa_pred_df
, aes(
x = novelty
, fill=domain
)
) +
geom_histogram(
alpha=0.9
, position="identity"
) +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = novelty.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("Novelty")
out_dist <- ggplot(
cfa_pred_df
, aes(
x = outputs_outcomes
, fill=domain
)
) +
geom_histogram(
alpha=0.9
, position="identity"
) +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = outputs_outcomes.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("Outputs & Outcomes")
library(ggpubr)
factor_domain.plot <- ggarrange(
so_dist
, trinv_dist + rremove("ylab")
, trgoals_dist + rremove("ylab")
, novelty_dist
, out_dist + rremove("ylab")
, common.legend = TRUE
, legend = "top"
) +
labs(caption = "(Pauloo, et al. 2017)")
ggsave("../SIVOCS/utku/V8_Valuation of SNSF funded research through social innovation_utku_v3/factor_domain.svg", factor_domain.plot)
source("./03_model/17_create_an_si_index.R")
library("dplyr")
library("ggplot2")
library("alluvial")
library("ggforce")
library("ggalluvial")
library("ggparallel")
library(GGally)
# -> split factors into intervalls in fitted df
den <- cfa_pred_df[, 1:5]
split3 <- function(var) {
var <- ifelse(var <= 3, 0,
ifelse(var < 7 , 1, 2))
return(var)
}
# -> Create a basis for the SI-Indec by calculating the rowSums of the factors
den <- as.data.frame(sapply(den, split3))
den$sum <- as.vector(rowSums(den))
# -> Introduce the raw index and place it with the other factors
cfa_pred_df$den_ind <- factor(split3(den$sum))
colnames(cfa_pred_df)
cfa_pred_df  <- cfa_pred_df[, c(1:5, 13 , 6:12)]
# Parallel coordinates didn't work well
# -> Try alluvial:
#-------------------------------------------------------------------------------
# -> Define graph colors (darker colors for SI-Index)
A_col <- "darkorchid1"
A_col2 <- "darkorchid3"
B_col <- "darkorange1"
B_col2 <- "darkorange3"
C_col <- "skyblue1"
C_col2 <- "skyblue3"
alpha <- 0.7 # transparency value
si_index <- den$solution_orientation +
den$an_transdisciplinary_inv*0.5 +
den$an_transdisciplinary_goals*0.5 +
den$novelty +
den$outputs_outcomes
# If there are more than 1 zero in a line, si_index is set to be a 0
for (i in seq_len(nrow(den))) {
k = 2
for (j in seq_len(ncol(den))) {
if (k == 0) {
si_index[i] = 0
print(i)
} else if (den[i, j] == 0) {
k = k - 1
}
}
}
den <- as.data.frame(cbind(den, si_index))
den$si_index <- scales::rescale(den$si_index, c(1,10))
den$si_index <- split3(den$si_index)
den$solution_orientation <- factor(den$solution_orientation)
den$an_transdisciplinary_inv <- factor(den$an_transdisciplinary_inv)
den$an_transdisciplinary_goals <- factor(den$an_transdisciplinary_goals)
den$novelty <- factor(den$novelty)
den$outputs_outcomes <- factor(den$outputs_outcomes)
den$si_index <- factor(den$si_index)
levels(den$solution_orientation) <- c("0 - 3\n(32%)", "4 - 6\n(57%)", "7 - 10\n(11%)")
levels(den$an_transdisciplinary_inv) <- c("0 - 3\n(48%)", "4 - 6\n(46%)", "7 - 10\n(6%)")
levels(den$an_transdisciplinary_goals) <- c("0 - 3\n(35%)", "4 - 6\n(56%)", "7 - 10\n(9%)")
levels(den$novelty) <- c("0 - 3\n(35%)", "4 - 6\n(58%)", "7 - 10\n(7%)")
levels(den$outputs_outcomes) <- c("0 - 3\n(31%)", "4 - 6\n(59%)", "7 - 10\n(10%)")
levels(den$si_index) <- c("0 - 3\n(39%)", "4 - 6\n(51%)", "7 - 10\n(10%)")
table(den$si_index)/361
den_plot <- ggparallel(list(
"solution_orientation"
, "an_transdisciplinary_inv"
, "an_transdisciplinary_goals"
, "novelty"
,"outputs_outcomes"
, "si_index"
), data = den
, width = 0.3
, alpha = alpha
, order = 0
, label.size = 7,
, text.angle=0
) +
scale_fill_manual(values  = c(A_col, B_col, C_col, A_col, B_col, C_col, A_col, B_col, C_col, A_col, B_col, C_col, A_col2, B_col2, C_col2, A_col, B_col, C_col)) +
scale_color_manual(values  = c(A_col, B_col, C_col, A_col, B_col, C_col, A_col, B_col, C_col, A_col, B_col, C_col, A_col2, B_col2, C_col2, A_col, B_col, C_col)) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 16, face = "bold", angle = 45, hjust=1)
) + scale_x_discrete(labels= c("Sol.-Orientation", "Transdisc. Involvement", "Transdisc. Goals", "Novelty", "Outcomes", "SI-Index"))
ggsave(
den_plot
, device="svg"
, filename = "../SIVOCS/utku/V8_Valuation of SNSF funded research through social innovation_utku_v3/si_alluvial.svg"
, dpi = 900
, width = 16
, height = 10
)
# -> Create a domain distribution plot
table(cfa_pred_df$si_index)
cfa_pred_df$si_index <- scales::rescale(si_index, c(0,10))
cfa_pred_df.rating_mean$si_index.rating.mean <- ddply(
cfa_pred_df
, "domain"
, summarise
, si_index.rating.mean = mean(si_index))$si_index.rating.mean
si_dist <- ggplot(
cfa_pred_df
, aes(
x = si_index
, fill=domain
)
) +
geom_density(
alpha=0.9
, position="identity"
) +
scale_fill_manual(
values = c("#FC4E07", "#E7B800", "#00AFBB")
, name = "Domain"
) +
geom_vline(
data = cfa_pred_df.rating_mean
, aes(
xintercept = si_index.rating.mean)
,  colour = c("#FC4E07", "#E7B800", "#00AFBB")
, linetype="dashed", size=1)+
theme_light() +
theme(legend.position="top") +
scale_x_continuous(breaks = seq(0, 10, 2)) +
xlab("SI-Index")
si_dist
sum(7 <=cfa_pred_df$si_index)
cor(cfa_pred_df$si_index, feat_df.num_o$contribToSI.rate.)
## anova(cfa_pred_df$si_index, feat_df.num_o$contribToSI.rate.)
cfa_pred_df.rating_mean
mean(cfa_pred_df$si_index - feat_df.num$contribToSI.rate., na.rm = T)
sum(!is.na(feat_df.num$contribToSI.rate.))
class(cfa_pred_df$si_index)
index_contrib_df <- as.data.frame(
cbind(
si_index = cfa_pred_df$si_index,
contribToSI.rate. = feat_df.num$contribToSI.rate.
#, domain = cfa_pred_df$domain
)
)
likert_recode
summary(feat_df.num$contribToSI.rate.)
index_contrib_df$contribToSI.rate. <- likert_recode(index_contrib_df$contribToSI.rate.)
col_seq <- c("#f4a582",
"#92c5de",
"#2166ac")
index_contrib_cor <- cor(index_contrib_df$si_index, feat_df.num$contribToSI.rate., method = "spearman", use = "pairwise.complete.obs")
index_contrib_df %>%
filter(!is.na(contribToSI.rate.)) %>%
gather(key="contribToSI.rate.", value="si_index") %>%
ggplot( aes(x=si_index, y=contribToSI.rate., fill = contribToSI.rate.)) +
geom_boxplot() +
ylab(" ") +
scale_x_continuous(breaks = seq(0,10,2)) +
theme_light() +
theme(axis.text.y=element_blank()) +
xlab("SI-Index") +
scale_fill_manual(values=col_seq, name="Contribution to SI (self-assessment)")+
guides(fill = guide_legend(reverse = TRUE)) +
annotate("text", x = 1, y = 3.5, label = paste0("Cor. (Spearman's rho): ", round(index_contrib_cor, 2)))
shapiro.test(as.numeric(cfa_pred_df$si_index - feat_df.num$contribToSI.rate.))
t.test( feat_df.num$contribToSI.rate., cfa_pred_df$si_index,paired = TRUE, alternative = "two.sided")
mean( feat_df.num_o$contribToSI.rate.)
kruskal.test(cfa_pred_df$si_index ~ feat_df.num$contribToSI.rate.)
wilcox.test(cfa_pred_df$si_index[!is.na(feat_df.num$contribToSI.rate.)], as.numeric(feat_df.num$contribToSI.rate.)[!is.na(feat_df.num$contribToSI.rate.)],
mu = 0,
alt = "two.sided",
conf.int = T,
conf.level = 0.95,
paired = F,
correct = T,
p.adjust="bonferroni" )
